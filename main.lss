
main.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000ae0  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000012  00800060  00000ae0  00000b74  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000003f  00800072  00800072  00000b86  2**0
                  ALLOC
  3 .stab         000010bc  00000000  00000000  00000b88  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000a7c  00000000  00000000  00001c44  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e0 ee       	ldi	r30, 0xE0	; 224
  68:	fa e0       	ldi	r31, 0x0A	; 10
  6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
  70:	a2 37       	cpi	r26, 0x72	; 114
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
  76:	10 e0       	ldi	r17, 0x00	; 0
  78:	a2 e7       	ldi	r26, 0x72	; 114
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a1 3b       	cpi	r26, 0xB1	; 177
  82:	b1 07       	cpc	r27, r17
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 13 03 	call	0x626	; 0x626 <main>
  8a:	0c 94 6e 05 	jmp	0xadc	; 0xadc <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <InitPorts>:
}

void InitPorts(void) 						//initialize the pins 
{
	//initializes the pins connected to motor driver as output
	sbi(DDRD,5);						
  92:	8d 9a       	sbi	0x11, 5	; 17
	sbi(DDRB,2);
  94:	ba 9a       	sbi	0x17, 2	; 23
	sbi(DDRB,3);	
  96:	bb 9a       	sbi	0x17, 3	; 23
	sbi(DDRD,4);
  98:	8c 9a       	sbi	0x11, 4	; 17
	sbi(DDRB,0);
  9a:	b8 9a       	sbi	0x17, 0	; 23
	sbi(DDRB,1);
  9c:	b9 9a       	sbi	0x17, 1	; 23
	cbi(PORTD,5);
  9e:	95 98       	cbi	0x12, 5	; 18
	cbi(PORTB,2);
  a0:	c2 98       	cbi	0x18, 2	; 24
	cbi(PORTB,3);	
  a2:	c3 98       	cbi	0x18, 3	; 24
	cbi(PORTD,4);
  a4:	94 98       	cbi	0x12, 4	; 18
	cbi(PORTB,0);
  a6:	c0 98       	cbi	0x18, 0	; 24
	cbi(PORTB,1);
  a8:	c1 98       	cbi	0x18, 1	; 24
	
	//initiallizes the motor enable pins as output
	sbi(PORTD,4);	
  aa:	94 9a       	sbi	0x12, 4	; 18
	sbi(PORTD,5);
  ac:	95 9a       	sbi	0x12, 5	; 18
	sbi(DDRD,2);
  ae:	8a 9a       	sbi	0x11, 2	; 17
	sbi(DDRD,3);
  b0:	8b 9a       	sbi	0x11, 3	; 17
	sbi(PORTD,2);
  b2:	92 9a       	sbi	0x12, 2	; 18
	sbi(PORTD,3);
  b4:	93 9a       	sbi	0x12, 3	; 18
	
	DDRA = 0;    								//sets the port connected to sensors as input	
  b6:	1a ba       	out	0x1a, r1	; 26
	PORTA = 255;
  b8:	8f ef       	ldi	r24, 0xFF	; 255
  ba:	8b bb       	out	0x1b, r24	; 27
	sbi(DDRC,0);
  bc:	a0 9a       	sbi	0x14, 0	; 20
	sbi(DDRC,1);
  be:	a1 9a       	sbi	0x14, 1	; 20
	sbi(DDRC,2);
  c0:	a2 9a       	sbi	0x14, 2	; 20
	sbi(DDRC,3);
  c2:	a3 9a       	sbi	0x14, 3	; 20
	cbi(DDRC,4);
  c4:	a4 98       	cbi	0x14, 4	; 20
	cbi(DDRC,5);
  c6:	a5 98       	cbi	0x14, 5	; 20
	cbi(DDRC,6);
  c8:	a6 98       	cbi	0x14, 6	; 20
	cbi(DDRC,7);
  ca:	a7 98       	cbi	0x14, 7	; 20
	PORTC=0b11111111;							//enable pull up	
  cc:	85 bb       	out	0x15, r24	; 21
}
  ce:	08 95       	ret

000000d0 <InitPWM>:


void InitPWM(void)								//initialize PWM				
{	
	TCCR1A = 0b10100001;		
  d0:	81 ea       	ldi	r24, 0xA1	; 161
  d2:	8f bd       	out	0x2f, r24	; 47
	TCCR1B = 0b00001010; 
  d4:	8a e0       	ldi	r24, 0x0A	; 10
  d6:	8e bd       	out	0x2e, r24	; 46
		
}
  d8:	08 95       	ret

000000da <CalcError>:

void CalcError()								//calculates the current error
{				
  da:	2f 92       	push	r2
  dc:	3f 92       	push	r3
  de:	4f 92       	push	r4
  e0:	5f 92       	push	r5
  e2:	6f 92       	push	r6
  e4:	7f 92       	push	r7
  e6:	8f 92       	push	r8
  e8:	9f 92       	push	r9
  ea:	af 92       	push	r10
  ec:	bf 92       	push	r11
  ee:	cf 92       	push	r12
  f0:	df 92       	push	r13
  f2:	ef 92       	push	r14
  f4:	ff 92       	push	r15
  f6:	0f 93       	push	r16
  f8:	1f 93       	push	r17
  fa:	df 93       	push	r29
  fc:	cf 93       	push	r28
  fe:	00 d0       	rcall	.+0      	; 0x100 <CalcError+0x26>
 100:	00 d0       	rcall	.+0      	; 0x102 <CalcError+0x28>
 102:	cd b7       	in	r28, 0x3d	; 61
 104:	de b7       	in	r29, 0x3e	; 62
	s1 = 0;
 106:	10 92 8a 00 	sts	0x008A, r1
 10a:	10 92 89 00 	sts	0x0089, r1
	s2 = 0;
 10e:	10 92 a2 00 	sts	0x00A2, r1
 112:	10 92 a1 00 	sts	0x00A1, r1
	s3 = 0;
 116:	10 92 aa 00 	sts	0x00AA, r1
 11a:	10 92 a9 00 	sts	0x00A9, r1
	s4 = 0;
 11e:	10 92 96 00 	sts	0x0096, r1
 122:	10 92 95 00 	sts	0x0095, r1
	s5 = 0;
 126:	10 92 a0 00 	sts	0x00A0, r1
 12a:	10 92 9f 00 	sts	0x009F, r1
	s6 = 0;	
 12e:	10 92 86 00 	sts	0x0086, r1
 132:	10 92 85 00 	sts	0x0085, r1
	s7 = 0; 
 136:	10 92 ac 00 	sts	0x00AC, r1
 13a:	10 92 ab 00 	sts	0x00AB, r1
	s8 = 0;
 13e:	10 92 98 00 	sts	0x0098, r1
 142:	10 92 97 00 	sts	0x0097, r1
	
	if((PINA&0b00000001)==(0b00000001))
 146:	c8 9b       	sbis	0x19, 0	; 25
 148:	09 c0       	rjmp	.+18     	; 0x15c <CalcError+0x82>
	{
		lastreading = 'r';
 14a:	82 e7       	ldi	r24, 0x72	; 114
 14c:	80 93 60 00 	sts	0x0060, r24
		s8 = 1;	
 150:	81 e0       	ldi	r24, 0x01	; 1
 152:	90 e0       	ldi	r25, 0x00	; 0
 154:	90 93 98 00 	sts	0x0098, r25
 158:	80 93 97 00 	sts	0x0097, r24
	}

	if((PINA&0b00000010)==(0b00000010))
 15c:	c9 9b       	sbis	0x19, 1	; 25
 15e:	06 c0       	rjmp	.+12     	; 0x16c <CalcError+0x92>
	{
		//lastreading = 'r';
		s7 = 1;
 160:	81 e0       	ldi	r24, 0x01	; 1
 162:	90 e0       	ldi	r25, 0x00	; 0
 164:	90 93 ac 00 	sts	0x00AC, r25
 168:	80 93 ab 00 	sts	0x00AB, r24
	}
	
	if((PINA&0b00000100)==(0b00000100))		
 16c:	ca 9b       	sbis	0x19, 2	; 25
 16e:	06 c0       	rjmp	.+12     	; 0x17c <CalcError+0xa2>
		s6 = 1;
 170:	81 e0       	ldi	r24, 0x01	; 1
 172:	90 e0       	ldi	r25, 0x00	; 0
 174:	90 93 86 00 	sts	0x0086, r25
 178:	80 93 85 00 	sts	0x0085, r24
		
	if((PINA&0b00001000)==(0b00001000))
 17c:	cb 9b       	sbis	0x19, 3	; 25
 17e:	06 c0       	rjmp	.+12     	; 0x18c <CalcError+0xb2>
		s5 = 1;
 180:	81 e0       	ldi	r24, 0x01	; 1
 182:	90 e0       	ldi	r25, 0x00	; 0
 184:	90 93 a0 00 	sts	0x00A0, r25
 188:	80 93 9f 00 	sts	0x009F, r24
		
	if((PINA&0b00010000)==(0b00010000))		
 18c:	cc 9b       	sbis	0x19, 4	; 25
 18e:	06 c0       	rjmp	.+12     	; 0x19c <CalcError+0xc2>
		s4 = 1;
 190:	81 e0       	ldi	r24, 0x01	; 1
 192:	90 e0       	ldi	r25, 0x00	; 0
 194:	90 93 96 00 	sts	0x0096, r25
 198:	80 93 95 00 	sts	0x0095, r24
		
	if((PINA&0b00100000)==(0b00100000))	
 19c:	cd 9b       	sbis	0x19, 5	; 25
 19e:	06 c0       	rjmp	.+12     	; 0x1ac <CalcError+0xd2>
		s3 = 1;
 1a0:	81 e0       	ldi	r24, 0x01	; 1
 1a2:	90 e0       	ldi	r25, 0x00	; 0
 1a4:	90 93 aa 00 	sts	0x00AA, r25
 1a8:	80 93 a9 00 	sts	0x00A9, r24
		
	if((PINA&0b01000000)==(0b01000000))
 1ac:	ce 9b       	sbis	0x19, 6	; 25
 1ae:	06 c0       	rjmp	.+12     	; 0x1bc <CalcError+0xe2>
	{
		//lastreading = 'l';
		s2 = 1;
 1b0:	81 e0       	ldi	r24, 0x01	; 1
 1b2:	90 e0       	ldi	r25, 0x00	; 0
 1b4:	90 93 a2 00 	sts	0x00A2, r25
 1b8:	80 93 a1 00 	sts	0x00A1, r24
	}
	
	
	if((PINA&0b10000000)==(0b10000000))		
 1bc:	cf 9b       	sbis	0x19, 7	; 25
 1be:	09 c0       	rjmp	.+18     	; 0x1d2 <CalcError+0xf8>
	{
		lastreading = 'l';
 1c0:	8c e6       	ldi	r24, 0x6C	; 108
 1c2:	80 93 60 00 	sts	0x0060, r24
		s1 = 1;	
 1c6:	81 e0       	ldi	r24, 0x01	; 1
 1c8:	90 e0       	ldi	r25, 0x00	; 0
 1ca:	90 93 8a 00 	sts	0x008A, r25
 1ce:	80 93 89 00 	sts	0x0089, r24
	}
	perror = error;
 1d2:	80 91 73 00 	lds	r24, 0x0073
 1d6:	90 91 74 00 	lds	r25, 0x0074
 1da:	a0 91 75 00 	lds	r26, 0x0075
 1de:	b0 91 76 00 	lds	r27, 0x0076
 1e2:	80 93 77 00 	sts	0x0077, r24
 1e6:	90 93 78 00 	sts	0x0078, r25
 1ea:	a0 93 79 00 	sts	0x0079, r26
 1ee:	b0 93 7a 00 	sts	0x007A, r27
	
	//the following statements calculate the error
	
	error = (s1 * 1) + (s2 * 2) + (s3 * 3) + (s4 * 4) + (s5 * 5) + (s6 * 6) +(s7 * 7) + (s8*8);
 1f2:	80 91 89 00 	lds	r24, 0x0089
 1f6:	90 91 8a 00 	lds	r25, 0x008A
 1fa:	9a 83       	std	Y+2, r25	; 0x02
 1fc:	89 83       	std	Y+1, r24	; 0x01
 1fe:	e0 90 a9 00 	lds	r14, 0x00A9
 202:	f0 90 aa 00 	lds	r15, 0x00AA
 206:	20 90 a1 00 	lds	r2, 0x00A1
 20a:	30 90 a2 00 	lds	r3, 0x00A2
 20e:	80 90 9f 00 	lds	r8, 0x009F
 212:	90 90 a0 00 	lds	r9, 0x00A0
 216:	00 91 95 00 	lds	r16, 0x0095
 21a:	10 91 96 00 	lds	r17, 0x0096
 21e:	60 90 ab 00 	lds	r6, 0x00AB
 222:	70 90 ac 00 	lds	r7, 0x00AC
 226:	40 90 85 00 	lds	r4, 0x0085
 22a:	50 90 86 00 	lds	r5, 0x0086
 22e:	e0 91 97 00 	lds	r30, 0x0097
 232:	f0 91 98 00 	lds	r31, 0x0098
 236:	fc 83       	std	Y+4, r31	; 0x04
 238:	eb 83       	std	Y+3, r30	; 0x03
	error = (error)/(s1+s2+s3+s4+s5+s6+s7+s8);	
	error = error - 4.5;
 23a:	b7 01       	movw	r22, r14
 23c:	66 0f       	add	r22, r22
 23e:	77 1f       	adc	r23, r23
 240:	6e 0d       	add	r22, r14
 242:	7f 1d       	adc	r23, r15
 244:	91 01       	movw	r18, r2
 246:	22 0f       	add	r18, r18
 248:	33 1f       	adc	r19, r19
 24a:	62 0f       	add	r22, r18
 24c:	73 1f       	adc	r23, r19
 24e:	68 0f       	add	r22, r24
 250:	79 1f       	adc	r23, r25
 252:	94 01       	movw	r18, r8
 254:	22 0f       	add	r18, r18
 256:	33 1f       	adc	r19, r19
 258:	22 0f       	add	r18, r18
 25a:	33 1f       	adc	r19, r19
 25c:	28 0d       	add	r18, r8
 25e:	39 1d       	adc	r19, r9
 260:	62 0f       	add	r22, r18
 262:	73 1f       	adc	r23, r19
 264:	98 01       	movw	r18, r16
 266:	22 0f       	add	r18, r18
 268:	33 1f       	adc	r19, r19
 26a:	22 0f       	add	r18, r18
 26c:	33 1f       	adc	r19, r19
 26e:	62 0f       	add	r22, r18
 270:	73 1f       	adc	r23, r19
 272:	93 01       	movw	r18, r6
 274:	53 e0       	ldi	r21, 0x03	; 3
 276:	22 0f       	add	r18, r18
 278:	33 1f       	adc	r19, r19
 27a:	5a 95       	dec	r21
 27c:	e1 f7       	brne	.-8      	; 0x276 <CalcError+0x19c>
 27e:	26 19       	sub	r18, r6
 280:	37 09       	sbc	r19, r7
 282:	62 0f       	add	r22, r18
 284:	73 1f       	adc	r23, r19
 286:	92 01       	movw	r18, r4
 288:	22 0f       	add	r18, r18
 28a:	33 1f       	adc	r19, r19
 28c:	24 0d       	add	r18, r4
 28e:	35 1d       	adc	r19, r5
 290:	22 0f       	add	r18, r18
 292:	33 1f       	adc	r19, r19
 294:	62 0f       	add	r22, r18
 296:	73 1f       	adc	r23, r19
 298:	9f 01       	movw	r18, r30
 29a:	83 e0       	ldi	r24, 0x03	; 3
 29c:	22 0f       	add	r18, r18
 29e:	33 1f       	adc	r19, r19
 2a0:	8a 95       	dec	r24
 2a2:	e1 f7       	brne	.-8      	; 0x29c <CalcError+0x1c2>
 2a4:	62 0f       	add	r22, r18
 2a6:	73 1f       	adc	r23, r19
 2a8:	80 e0       	ldi	r24, 0x00	; 0
 2aa:	90 e0       	ldi	r25, 0x00	; 0
 2ac:	0e 94 7d 04 	call	0x8fa	; 0x8fa <__floatunsisf>
 2b0:	5b 01       	movw	r10, r22
 2b2:	6c 01       	movw	r12, r24
 2b4:	89 81       	ldd	r24, Y+1	; 0x01
 2b6:	9a 81       	ldd	r25, Y+2	; 0x02
 2b8:	e8 0e       	add	r14, r24
 2ba:	f9 1e       	adc	r15, r25
 2bc:	e2 0c       	add	r14, r2
 2be:	f3 1c       	adc	r15, r3
 2c0:	e8 0c       	add	r14, r8
 2c2:	f9 1c       	adc	r15, r9
 2c4:	e0 0e       	add	r14, r16
 2c6:	f1 1e       	adc	r15, r17
 2c8:	e6 0c       	add	r14, r6
 2ca:	f7 1c       	adc	r15, r7
 2cc:	e4 0c       	add	r14, r4
 2ce:	f5 1c       	adc	r15, r5
 2d0:	eb 81       	ldd	r30, Y+3	; 0x03
 2d2:	fc 81       	ldd	r31, Y+4	; 0x04
 2d4:	ee 0e       	add	r14, r30
 2d6:	ff 1e       	adc	r15, r31
 2d8:	00 e0       	ldi	r16, 0x00	; 0
 2da:	10 e0       	ldi	r17, 0x00	; 0
 2dc:	c8 01       	movw	r24, r16
 2de:	b7 01       	movw	r22, r14
 2e0:	0e 94 7d 04 	call	0x8fa	; 0x8fa <__floatunsisf>
 2e4:	9b 01       	movw	r18, r22
 2e6:	ac 01       	movw	r20, r24
 2e8:	c6 01       	movw	r24, r12
 2ea:	b5 01       	movw	r22, r10
 2ec:	0e 94 e9 03 	call	0x7d2	; 0x7d2 <__divsf3>
 2f0:	20 e0       	ldi	r18, 0x00	; 0
 2f2:	30 e0       	ldi	r19, 0x00	; 0
 2f4:	40 e9       	ldi	r20, 0x90	; 144
 2f6:	50 e4       	ldi	r21, 0x40	; 64
 2f8:	0e 94 84 03 	call	0x708	; 0x708 <__subsf3>
 2fc:	60 93 73 00 	sts	0x0073, r22
 300:	70 93 74 00 	sts	0x0074, r23
 304:	80 93 75 00 	sts	0x0075, r24
 308:	90 93 76 00 	sts	0x0076, r25
}
 30c:	0f 90       	pop	r0
 30e:	0f 90       	pop	r0
 310:	0f 90       	pop	r0
 312:	0f 90       	pop	r0
 314:	cf 91       	pop	r28
 316:	df 91       	pop	r29
 318:	1f 91       	pop	r17
 31a:	0f 91       	pop	r16
 31c:	ff 90       	pop	r15
 31e:	ef 90       	pop	r14
 320:	df 90       	pop	r13
 322:	cf 90       	pop	r12
 324:	bf 90       	pop	r11
 326:	af 90       	pop	r10
 328:	9f 90       	pop	r9
 32a:	8f 90       	pop	r8
 32c:	7f 90       	pop	r7
 32e:	6f 90       	pop	r6
 330:	5f 90       	pop	r5
 332:	4f 90       	pop	r4
 334:	3f 90       	pop	r3
 336:	2f 90       	pop	r2
 338:	08 95       	ret

0000033a <ReachTable>:
	}
	
}

void ReachTable(void)
{
 33a:	2f 92       	push	r2
 33c:	3f 92       	push	r3
 33e:	4f 92       	push	r4
 340:	5f 92       	push	r5
 342:	6f 92       	push	r6
 344:	7f 92       	push	r7
 346:	8f 92       	push	r8
 348:	9f 92       	push	r9
 34a:	af 92       	push	r10
 34c:	bf 92       	push	r11
 34e:	cf 92       	push	r12
 350:	df 92       	push	r13
 352:	ef 92       	push	r14
 354:	ff 92       	push	r15
 356:	0f 93       	push	r16
 358:	1f 93       	push	r17
 35a:	cf 93       	push	r28
 35c:	df 93       	push	r29
	c=0;
 35e:	10 92 7c 00 	sts	0x007C, r1
 362:	10 92 7b 00 	sts	0x007B, r1
				
				if(leftpulse < 0)
				leftpulse = 0;
				
				if(rightpulse > 205)
				rightpulse = 205;
 366:	7d ec       	ldi	r23, 0xCD	; 205
 368:	27 2e       	mov	r2, r23
 36a:	31 2c       	mov	r3, r1
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
 36c:	60 e9       	ldi	r22, 0x90	; 144
 36e:	46 2e       	mov	r4, r22
 370:	61 e0       	ldi	r22, 0x01	; 1
 372:	56 2e       	mov	r5, r22
 374:	2f c1       	rjmp	.+606    	; 0x5d4 <ReachTable+0x29a>
	while(c!=x)
	{		
		
		
			
		if(pause == false)					
 376:	44 23       	and	r20, r20
 378:	f1 f7       	brne	.-4      	; 0x376 <ReachTable+0x3c>
		{					
			CalcError();			
 37a:	0e 94 6d 00 	call	0xda	; 0xda <CalcError>
			
			if((s1+s2+s3+s4+s5+s6+s7+s8) == 0)		//robot has overshot
 37e:	20 91 a1 00 	lds	r18, 0x00A1
 382:	30 91 a2 00 	lds	r19, 0x00A2
 386:	80 91 89 00 	lds	r24, 0x0089
 38a:	90 91 8a 00 	lds	r25, 0x008A
 38e:	28 0f       	add	r18, r24
 390:	39 1f       	adc	r19, r25
 392:	80 91 a9 00 	lds	r24, 0x00A9
 396:	90 91 aa 00 	lds	r25, 0x00AA
 39a:	28 0f       	add	r18, r24
 39c:	39 1f       	adc	r19, r25
 39e:	80 91 95 00 	lds	r24, 0x0095
 3a2:	90 91 96 00 	lds	r25, 0x0096
 3a6:	28 0f       	add	r18, r24
 3a8:	39 1f       	adc	r19, r25
 3aa:	80 91 9f 00 	lds	r24, 0x009F
 3ae:	90 91 a0 00 	lds	r25, 0x00A0
 3b2:	28 0f       	add	r18, r24
 3b4:	39 1f       	adc	r19, r25
 3b6:	80 91 85 00 	lds	r24, 0x0085
 3ba:	90 91 86 00 	lds	r25, 0x0086
 3be:	28 0f       	add	r18, r24
 3c0:	39 1f       	adc	r19, r25
 3c2:	80 91 ab 00 	lds	r24, 0x00AB
 3c6:	90 91 ac 00 	lds	r25, 0x00AC
 3ca:	28 0f       	add	r18, r24
 3cc:	39 1f       	adc	r19, r25
 3ce:	80 91 97 00 	lds	r24, 0x0097
 3d2:	90 91 98 00 	lds	r25, 0x0098
 3d6:	28 0f       	add	r18, r24
 3d8:	39 1f       	adc	r19, r25
 3da:	21 15       	cp	r18, r1
 3dc:	31 05       	cpc	r19, r1
 3de:	b1 f4       	brne	.+44     	; 0x40c <ReachTable+0xd2>
			{
				if(lastreading == 'r')				//checks if the last sensor to the activated was right
 3e0:	80 91 60 00 	lds	r24, 0x0060
 3e4:	82 37       	cpi	r24, 0x72	; 114
 3e6:	21 f4       	brne	.+8      	; 0x3f0 <ReachTable+0xb6>
}

void RightMS(void)
{
	//sbi(PORTD,4);
	cbi(PORTB,0);
 3e8:	c0 98       	cbi	0x18, 0	; 24
	cbi(PORTB,1);
 3ea:	c1 98       	cbi	0x18, 1	; 24
	sbi(PORTB,1);
}
void LeftMF(void)
{
	//sbi(PORTD,5);
	sbi(PORTB,2);
 3ec:	c2 9a       	sbi	0x18, 2	; 24
 3ee:	06 c0       	rjmp	.+12     	; 0x3fc <ReachTable+0xc2>
					LeftMF();
					OCR1A = maxspeed;
					OCR1B = maxspeed;	
				}
				
				else if(lastreading == 'l')			//checks if the last sensor to the activated was left
 3f0:	8c 36       	cpi	r24, 0x6C	; 108
 3f2:	09 f0       	breq	.+2      	; 0x3f6 <ReachTable+0xbc>
 3f4:	ef c0       	rjmp	.+478    	; 0x5d4 <ReachTable+0x29a>
}

void RightMF(void)
{
	//sbi(PORTD,4);
	cbi(PORTB,0);
 3f6:	c0 98       	cbi	0x18, 0	; 24
	sbi(PORTB,1);
 3f8:	c1 9a       	sbi	0x18, 1	; 24
	cbi(PORTB,1);
}
void LeftMS(void)
{
	//sbi(PORTD,5);
	cbi(PORTB,2);
 3fa:	c2 98       	cbi	0x18, 2	; 24
	cbi(PORTB,3);
 3fc:	c3 98       	cbi	0x18, 3	; 24
				else if(lastreading == 'l')			//checks if the last sensor to the activated was left
				{
					RightMF();						//turn left at full speed

					LeftMS();	
					OCR1A = maxspeed;
 3fe:	80 91 61 00 	lds	r24, 0x0061
 402:	90 91 62 00 	lds	r25, 0x0062
 406:	9b bd       	out	0x2b, r25	; 43
 408:	8a bd       	out	0x2a, r24	; 42
 40a:	e2 c0       	rjmp	.+452    	; 0x5d0 <ReachTable+0x296>
					OCR1B = maxspeed;					
				}				
			}
			else if((s1+s2+s3+s4+s5+s6+s7+s8) == 8)
 40c:	28 30       	cpi	r18, 0x08	; 8
 40e:	31 05       	cpc	r19, r1
 410:	81 f5       	brne	.+96     	; 0x472 <ReachTable+0x138>
			{
					c++;
 412:	80 91 7b 00 	lds	r24, 0x007B
 416:	90 91 7c 00 	lds	r25, 0x007C
 41a:	01 96       	adiw	r24, 0x01	; 1
 41c:	90 93 7c 00 	sts	0x007C, r25
 420:	80 93 7b 00 	sts	0x007B, r24
					if(c>table)
 424:	20 91 7d 00 	lds	r18, 0x007D
 428:	30 91 7e 00 	lds	r19, 0x007E
 42c:	28 17       	cp	r18, r24
 42e:	39 07       	cpc	r19, r25
 430:	2c f4       	brge	.+10     	; 0x43c <ReachTable+0x102>
}

void RightMS(void)
{
	//sbi(PORTD,4);
	cbi(PORTB,0);
 432:	c0 98       	cbi	0x18, 0	; 24
	cbi(PORTB,1);
 434:	c1 98       	cbi	0x18, 1	; 24
	cbi(PORTB,1);
}
void LeftMS(void)
{
	//sbi(PORTD,5);
	cbi(PORTB,2);
 436:	c2 98       	cbi	0x18, 2	; 24
	cbi(PORTB,3);
 438:	c3 98       	cbi	0x18, 3	; 24
 43a:	da c0       	rjmp	.+436    	; 0x5f0 <ReachTable+0x2b6>
					{
						RightMS();
						LeftMS();
						break;
					}
					else if(c==table)
 43c:	82 17       	cp	r24, r18
 43e:	93 07       	cpc	r25, r19
 440:	61 f4       	brne	.+24     	; 0x45a <ReachTable+0x120>
	sbi(PORTB,1);
}
void LeftMF(void)
{
	//sbi(PORTD,5);
	sbi(PORTB,2);
 442:	c2 9a       	sbi	0x18, 2	; 24
	cbi(PORTB,3);
 444:	c3 98       	cbi	0x18, 3	; 24
}

void RightMS(void)
{
	//sbi(PORTD,4);
	cbi(PORTB,0);
 446:	c0 98       	cbi	0x18, 0	; 24
	cbi(PORTB,1);
 448:	c1 98       	cbi	0x18, 1	; 24
 44a:	80 e9       	ldi	r24, 0x90	; 144
 44c:	95 e6       	ldi	r25, 0x65	; 101
 44e:	f2 01       	movw	r30, r4
 450:	31 97       	sbiw	r30, 0x01	; 1
 452:	f1 f7       	brne	.-4      	; 0x450 <ReachTable+0x116>
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 454:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 456:	d9 f7       	brne	.-10     	; 0x44e <ReachTable+0x114>
 458:	bd c0       	rjmp	.+378    	; 0x5d4 <ReachTable+0x29a>
}

void RightMF(void)
{
	//sbi(PORTD,4);
	cbi(PORTB,0);
 45a:	c0 98       	cbi	0x18, 0	; 24
	sbi(PORTB,1);
 45c:	c1 9a       	sbi	0x18, 1	; 24
}
void LeftMF(void)
{
	//sbi(PORTD,5);
	sbi(PORTB,2);
 45e:	c2 9a       	sbi	0x18, 2	; 24
	cbi(PORTB,3);
 460:	c3 98       	cbi	0x18, 3	; 24
 462:	80 e1       	ldi	r24, 0x10	; 16
 464:	97 e2       	ldi	r25, 0x27	; 39
 466:	f2 01       	movw	r30, r4
 468:	31 97       	sbiw	r30, 0x01	; 1
 46a:	f1 f7       	brne	.-4      	; 0x468 <ReachTable+0x12e>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 46c:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 46e:	d9 f7       	brne	.-10     	; 0x466 <ReachTable+0x12c>
 470:	b1 c0       	rjmp	.+354    	; 0x5d4 <ReachTable+0x29a>
					}
			}
			else  									//robot on line
			{	
				
				P = error * Kp;	
 472:	e0 90 73 00 	lds	r14, 0x0073
 476:	f0 90 74 00 	lds	r15, 0x0074
 47a:	00 91 75 00 	lds	r16, 0x0075
 47e:	10 91 76 00 	lds	r17, 0x0076
 482:	c8 01       	movw	r24, r16
 484:	b7 01       	movw	r22, r14
 486:	20 91 65 00 	lds	r18, 0x0065
 48a:	30 91 66 00 	lds	r19, 0x0066
 48e:	40 91 67 00 	lds	r20, 0x0067
 492:	50 91 68 00 	lds	r21, 0x0068
 496:	0e 94 0b 05 	call	0xa16	; 0xa16 <__mulsf3>
 49a:	3b 01       	movw	r6, r22
 49c:	4c 01       	movw	r8, r24
 49e:	60 93 ad 00 	sts	0x00AD, r22
 4a2:	70 93 ae 00 	sts	0x00AE, r23
 4a6:	80 93 af 00 	sts	0x00AF, r24
 4aa:	90 93 b0 00 	sts	0x00B0, r25
			
				I += error;
 4ae:	c8 01       	movw	r24, r16
 4b0:	b7 01       	movw	r22, r14
 4b2:	20 91 a3 00 	lds	r18, 0x00A3
 4b6:	30 91 a4 00 	lds	r19, 0x00A4
 4ba:	40 91 a5 00 	lds	r20, 0x00A5
 4be:	50 91 a6 00 	lds	r21, 0x00A6
 4c2:	0e 94 85 03 	call	0x70a	; 0x70a <__addsf3>
				I = I * Ki;
 4c6:	20 91 69 00 	lds	r18, 0x0069
 4ca:	30 91 6a 00 	lds	r19, 0x006A
 4ce:	40 91 6b 00 	lds	r20, 0x006B
 4d2:	50 91 6c 00 	lds	r21, 0x006C
 4d6:	0e 94 0b 05 	call	0xa16	; 0xa16 <__mulsf3>
 4da:	5b 01       	movw	r10, r22
 4dc:	6c 01       	movw	r12, r24
 4de:	60 93 a3 00 	sts	0x00A3, r22
 4e2:	70 93 a4 00 	sts	0x00A4, r23
 4e6:	80 93 a5 00 	sts	0x00A5, r24
 4ea:	90 93 a6 00 	sts	0x00A6, r25
				
				D = error - perror;
 4ee:	c8 01       	movw	r24, r16
 4f0:	b7 01       	movw	r22, r14
 4f2:	20 91 77 00 	lds	r18, 0x0077
 4f6:	30 91 78 00 	lds	r19, 0x0078
 4fa:	40 91 79 00 	lds	r20, 0x0079
 4fe:	50 91 7a 00 	lds	r21, 0x007A
 502:	0e 94 84 03 	call	0x708	; 0x708 <__subsf3>
				D = D*Kd;
 506:	20 91 6d 00 	lds	r18, 0x006D
 50a:	30 91 6e 00 	lds	r19, 0x006E
 50e:	40 91 6f 00 	lds	r20, 0x006F
 512:	50 91 70 00 	lds	r21, 0x0070
 516:	0e 94 0b 05 	call	0xa16	; 0xa16 <__mulsf3>
 51a:	7b 01       	movw	r14, r22
 51c:	8c 01       	movw	r16, r24
 51e:	60 93 81 00 	sts	0x0081, r22
 522:	70 93 82 00 	sts	0x0082, r23
 526:	80 93 83 00 	sts	0x0083, r24
 52a:	90 93 84 00 	sts	0x0084, r25
				
				correction = P + I + D;
 52e:	c4 01       	movw	r24, r8
 530:	b3 01       	movw	r22, r6
 532:	a6 01       	movw	r20, r12
 534:	95 01       	movw	r18, r10
 536:	0e 94 85 03 	call	0x70a	; 0x70a <__addsf3>
 53a:	a8 01       	movw	r20, r16
 53c:	97 01       	movw	r18, r14
 53e:	0e 94 85 03 	call	0x70a	; 0x70a <__addsf3>
 542:	7b 01       	movw	r14, r22
 544:	8c 01       	movw	r16, r24
 546:	60 93 99 00 	sts	0x0099, r22
 54a:	70 93 9a 00 	sts	0x009A, r23
 54e:	80 93 9b 00 	sts	0x009B, r24
 552:	90 93 9c 00 	sts	0x009C, r25
				
				rightpulse =  basespeed - correction;
 556:	60 91 63 00 	lds	r22, 0x0063
 55a:	70 91 64 00 	lds	r23, 0x0064
 55e:	80 e0       	ldi	r24, 0x00	; 0
 560:	90 e0       	ldi	r25, 0x00	; 0
 562:	0e 94 7d 04 	call	0x8fa	; 0x8fa <__floatunsisf>
 566:	5b 01       	movw	r10, r22
 568:	6c 01       	movw	r12, r24
 56a:	a8 01       	movw	r20, r16
 56c:	97 01       	movw	r18, r14
 56e:	0e 94 84 03 	call	0x708	; 0x708 <__subsf3>
 572:	0e 94 51 04 	call	0x8a2	; 0x8a2 <__fixunssfsi>
 576:	eb 01       	movw	r28, r22
 578:	70 93 9e 00 	sts	0x009E, r23
 57c:	60 93 9d 00 	sts	0x009D, r22
				leftpulse =   basespeed + correction;		
 580:	c6 01       	movw	r24, r12
 582:	b5 01       	movw	r22, r10
 584:	a8 01       	movw	r20, r16
 586:	97 01       	movw	r18, r14
 588:	0e 94 85 03 	call	0x70a	; 0x70a <__addsf3>
 58c:	0e 94 51 04 	call	0x8a2	; 0x8a2 <__fixunssfsi>
 590:	70 93 a8 00 	sts	0x00A8, r23
 594:	60 93 a7 00 	sts	0x00A7, r22
	sbi(PORTB,1);
}
void LeftMF(void)
{
	//sbi(PORTD,5);
	sbi(PORTB,2);
 598:	c2 9a       	sbi	0x18, 2	; 24
	cbi(PORTB,3);
 59a:	c3 98       	cbi	0x18, 3	; 24
}

void RightMF(void)
{
	//sbi(PORTD,4);
	cbi(PORTB,0);
 59c:	c0 98       	cbi	0x18, 0	; 24
	sbi(PORTB,1);
 59e:	c1 9a       	sbi	0x18, 1	; 24
				
				LeftMF();
				RightMF();
			
					
				if(leftpulse > 205)
 5a0:	6e 3c       	cpi	r22, 0xCE	; 206
 5a2:	71 05       	cpc	r23, r1
 5a4:	20 f0       	brcs	.+8      	; 0x5ae <ReachTable+0x274>
				leftpulse = 205;
 5a6:	30 92 a8 00 	sts	0x00A8, r3
 5aa:	20 92 a7 00 	sts	0x00A7, r2
				
				if(leftpulse < 0)
				leftpulse = 0;
				
				if(rightpulse > 205)
 5ae:	ce 3c       	cpi	r28, 0xCE	; 206
 5b0:	d1 05       	cpc	r29, r1
 5b2:	20 f0       	brcs	.+8      	; 0x5bc <ReachTable+0x282>
				rightpulse = 205;
 5b4:	30 92 9e 00 	sts	0x009E, r3
 5b8:	20 92 9d 00 	sts	0x009D, r2

				if(rightpulse < 0)
				rightpulse = 0;

				OCR1A = rightpulse;
 5bc:	80 91 9d 00 	lds	r24, 0x009D
 5c0:	90 91 9e 00 	lds	r25, 0x009E
 5c4:	9b bd       	out	0x2b, r25	; 43
 5c6:	8a bd       	out	0x2a, r24	; 42
				OCR1B = leftpulse;		
 5c8:	80 91 a7 00 	lds	r24, 0x00A7
 5cc:	90 91 a8 00 	lds	r25, 0x00A8
 5d0:	99 bd       	out	0x29, r25	; 41
 5d2:	88 bd       	out	0x28, r24	; 40
	while(c!=x)
	{		
		
		
			
		if(pause == false)					
 5d4:	40 91 72 00 	lds	r20, 0x0072
}

void ReachTable(void)
{
	c=0;
	while(c!=x)
 5d8:	20 91 7b 00 	lds	r18, 0x007B
 5dc:	30 91 7c 00 	lds	r19, 0x007C
 5e0:	80 91 7f 00 	lds	r24, 0x007F
 5e4:	90 91 80 00 	lds	r25, 0x0080
 5e8:	28 17       	cp	r18, r24
 5ea:	39 07       	cpc	r19, r25
 5ec:	09 f0       	breq	.+2      	; 0x5f0 <ReachTable+0x2b6>
 5ee:	c3 ce       	rjmp	.-634    	; 0x376 <ReachTable+0x3c>
}

void RightMS(void)
{
	//sbi(PORTD,4);
	cbi(PORTB,0);
 5f0:	c0 98       	cbi	0x18, 0	; 24
	cbi(PORTB,1);
 5f2:	c1 98       	cbi	0x18, 1	; 24
	cbi(PORTB,1);
}
void LeftMS(void)
{
	//sbi(PORTD,5);
	cbi(PORTB,2);
 5f4:	c2 98       	cbi	0x18, 2	; 24
	cbi(PORTB,3);
 5f6:	c3 98       	cbi	0x18, 3	; 24
 5f8:	80 e4       	ldi	r24, 0x40	; 64
 5fa:	9c e9       	ldi	r25, 0x9C	; 156
 5fc:	01 97       	sbiw	r24, 0x01	; 1
 5fe:	f1 f7       	brne	.-4      	; 0x5fc <ReachTable+0x2c2>
	}
		RightMS();
		LeftMS();
		_delay_ms(10);
		
}
 600:	df 91       	pop	r29
 602:	cf 91       	pop	r28
 604:	1f 91       	pop	r17
 606:	0f 91       	pop	r16
 608:	ff 90       	pop	r15
 60a:	ef 90       	pop	r14
 60c:	df 90       	pop	r13
 60e:	cf 90       	pop	r12
 610:	bf 90       	pop	r11
 612:	af 90       	pop	r10
 614:	9f 90       	pop	r9
 616:	8f 90       	pop	r8
 618:	7f 90       	pop	r7
 61a:	6f 90       	pop	r6
 61c:	5f 90       	pop	r5
 61e:	4f 90       	pop	r4
 620:	3f 90       	pop	r3
 622:	2f 90       	pop	r2
 624:	08 95       	ret

00000626 <main>:
int x=0;
int menu;


int main(void)
{
 626:	bf 92       	push	r11
 628:	cf 92       	push	r12
 62a:	df 92       	push	r13
 62c:	ef 92       	push	r14
 62e:	ff 92       	push	r15
 630:	0f 93       	push	r16
 632:	1f 93       	push	r17
 634:	cf 93       	push	r28
 636:	df 93       	push	r29
	unsigned int p;
	InitPorts();
 638:	0e 94 49 00 	call	0x92	; 0x92 <InitPorts>
}


void InitPWM(void)								//initialize PWM				
{	
	TCCR1A = 0b10100001;		
 63c:	81 ea       	ldi	r24, 0xA1	; 161
 63e:	8f bd       	out	0x2f, r24	; 47
	TCCR1B = 0b00001010; 
 640:	8a e0       	ldi	r24, 0x0A	; 10
 642:	8e bd       	out	0x2e, r24	; 46
	unsigned int p;
	InitPorts();
	InitPWM();	
	while(1)
	{
		PORTC=0b11111111;
 644:	bb 24       	eor	r11, r11
 646:	ba 94       	dec	r11
		
		PORTC=0b11111111;
		
		if(menu==16)
		{
			table=menu/16;
 648:	f1 e0       	ldi	r31, 0x01	; 1
 64a:	cf 2e       	mov	r12, r31
 64c:	d1 2c       	mov	r13, r1
			x=table+1;
 64e:	02 e0       	ldi	r16, 0x02	; 2
 650:	10 e0       	ldi	r17, 0x00	; 0
 652:	c0 e9       	ldi	r28, 0x90	; 144
 654:	d1 e0       	ldi	r29, 0x01	; 1
		}
		
		if(menu==32)
		{
			table=menu/16;
			x=table+1;
 656:	e3 e0       	ldi	r30, 0x03	; 3
 658:	ee 2e       	mov	r14, r30
 65a:	f1 2c       	mov	r15, r1
	unsigned int p;
	InitPorts();
	InitPWM();	
	while(1)
	{
		PORTC=0b11111111;
 65c:	b5 ba       	out	0x15, r11	; 21
		cbi(PORTC,0);
 65e:	a8 98       	cbi	0x15, 0	; 21
		cbi(PORTC,1);
 660:	a9 98       	cbi	0x15, 1	; 21
		cbi(PORTC,2);
 662:	aa 98       	cbi	0x15, 2	; 21
		cbi(PORTC,3);
 664:	ab 98       	cbi	0x15, 3	; 21
		do
		{
			menu=PINC&0b11110000;
 666:	83 b3       	in	r24, 0x13	; 19
 668:	90 e0       	ldi	r25, 0x00	; 0
 66a:	80 7f       	andi	r24, 0xF0	; 240
 66c:	90 70       	andi	r25, 0x00	; 0
		}while(menu==0b11110000);
 66e:	80 3f       	cpi	r24, 0xF0	; 240
 670:	91 05       	cpc	r25, r1
 672:	c9 f3       	breq	.-14     	; 0x666 <main+0x40>
 674:	90 93 88 00 	sts	0x0088, r25
 678:	80 93 87 00 	sts	0x0087, r24
		
		PORTC=0b11111111;
 67c:	b5 ba       	out	0x15, r11	; 21
		
		if(menu==16)
 67e:	40 97       	sbiw	r24, 0x10	; 16
 680:	a9 f4       	brne	.+42     	; 0x6ac <main+0x86>
		{
			table=menu/16;
 682:	d0 92 7e 00 	sts	0x007E, r13
 686:	c0 92 7d 00 	sts	0x007D, r12
			x=table+1;
 68a:	10 93 80 00 	sts	0x0080, r17
 68e:	00 93 7f 00 	sts	0x007F, r16
			ReachTable();
 692:	0e 94 9d 01 	call	0x33a	; 0x33a <ReachTable>
			sbi(PORTC,0);
 696:	a8 9a       	sbi	0x15, 0	; 21
			cbi(PORTC,1);
 698:	a9 98       	cbi	0x15, 1	; 21
			cbi(PORTC,2);
 69a:	aa 98       	cbi	0x15, 2	; 21
			cbi(PORTC,3);
 69c:	ab 98       	cbi	0x15, 3	; 21
 69e:	80 e1       	ldi	r24, 0x10	; 16
 6a0:	97 e2       	ldi	r25, 0x27	; 39
 6a2:	fe 01       	movw	r30, r28
 6a4:	31 97       	sbiw	r30, 0x01	; 1
 6a6:	f1 f7       	brne	.-4      	; 0x6a4 <main+0x7e>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 6a8:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 6aa:	d9 f7       	brne	.-10     	; 0x6a2 <main+0x7c>
			_delay_ms(1000);
		}
		
		if(menu==32)
 6ac:	80 91 87 00 	lds	r24, 0x0087
 6b0:	90 91 88 00 	lds	r25, 0x0088
 6b4:	80 97       	sbiw	r24, 0x20	; 32
 6b6:	91 f6       	brne	.-92     	; 0x65c <main+0x36>
		{
			table=menu/16;
 6b8:	10 93 7e 00 	sts	0x007E, r17
 6bc:	00 93 7d 00 	sts	0x007D, r16
			x=table+1;
 6c0:	f0 92 80 00 	sts	0x0080, r15
 6c4:	e0 92 7f 00 	sts	0x007F, r14
			ReachTable();
 6c8:	0e 94 9d 01 	call	0x33a	; 0x33a <ReachTable>
			sbi(PORTC,0);
 6cc:	a8 9a       	sbi	0x15, 0	; 21
			cbi(PORTC,1);
 6ce:	a9 98       	cbi	0x15, 1	; 21
			cbi(PORTC,2);
 6d0:	aa 98       	cbi	0x15, 2	; 21
			cbi(PORTC,3);
 6d2:	ab 98       	cbi	0x15, 3	; 21
 6d4:	80 e1       	ldi	r24, 0x10	; 16
 6d6:	97 e2       	ldi	r25, 0x27	; 39
 6d8:	fe 01       	movw	r30, r28
 6da:	31 97       	sbiw	r30, 0x01	; 1
 6dc:	f1 f7       	brne	.-4      	; 0x6da <main+0xb4>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 6de:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 6e0:	d9 f7       	brne	.-10     	; 0x6d8 <main+0xb2>
 6e2:	bc cf       	rjmp	.-136    	; 0x65c <main+0x36>

000006e4 <LeftMB>:
}

void LeftMB(void)	
{
	//sbi(PORTD,5);
	cbi(PORTB,2);
 6e4:	c2 98       	cbi	0x18, 2	; 24
	sbi(PORTB,3);
 6e6:	c3 9a       	sbi	0x18, 3	; 24
}
 6e8:	08 95       	ret

000006ea <RightMF>:

void RightMF(void)
{
	//sbi(PORTD,4);
	cbi(PORTB,0);
 6ea:	c0 98       	cbi	0x18, 0	; 24
	sbi(PORTB,1);
 6ec:	c1 9a       	sbi	0x18, 1	; 24
}
 6ee:	08 95       	ret

000006f0 <LeftMF>:
void LeftMF(void)
{
	//sbi(PORTD,5);
	sbi(PORTB,2);
 6f0:	c2 9a       	sbi	0x18, 2	; 24
	cbi(PORTB,3);
 6f2:	c3 98       	cbi	0x18, 3	; 24
}
 6f4:	08 95       	ret

000006f6 <RightMB>:

void RightMB(void)
{
	//sbi(PORTD,4);
	sbi(PORTB,0);
 6f6:	c0 9a       	sbi	0x18, 0	; 24
	cbi(PORTB,1);
 6f8:	c1 98       	cbi	0x18, 1	; 24
}
 6fa:	08 95       	ret

000006fc <LeftMS>:
void LeftMS(void)
{
	//sbi(PORTD,5);
	cbi(PORTB,2);
 6fc:	c2 98       	cbi	0x18, 2	; 24
	cbi(PORTB,3);
 6fe:	c3 98       	cbi	0x18, 3	; 24
}
 700:	08 95       	ret

00000702 <RightMS>:

void RightMS(void)
{
	//sbi(PORTD,4);
	cbi(PORTB,0);
 702:	c0 98       	cbi	0x18, 0	; 24
	cbi(PORTB,1);
 704:	c1 98       	cbi	0x18, 1	; 24
 706:	08 95       	ret

00000708 <__subsf3>:
 708:	50 58       	subi	r21, 0x80	; 128

0000070a <__addsf3>:
 70a:	bb 27       	eor	r27, r27
 70c:	aa 27       	eor	r26, r26
 70e:	0e d0       	rcall	.+28     	; 0x72c <__addsf3x>
 710:	48 c1       	rjmp	.+656    	; 0x9a2 <__fp_round>
 712:	39 d1       	rcall	.+626    	; 0x986 <__fp_pscA>
 714:	30 f0       	brcs	.+12     	; 0x722 <__addsf3+0x18>
 716:	3e d1       	rcall	.+636    	; 0x994 <__fp_pscB>
 718:	20 f0       	brcs	.+8      	; 0x722 <__addsf3+0x18>
 71a:	31 f4       	brne	.+12     	; 0x728 <__addsf3+0x1e>
 71c:	9f 3f       	cpi	r25, 0xFF	; 255
 71e:	11 f4       	brne	.+4      	; 0x724 <__addsf3+0x1a>
 720:	1e f4       	brtc	.+6      	; 0x728 <__addsf3+0x1e>
 722:	2e c1       	rjmp	.+604    	; 0x980 <__fp_nan>
 724:	0e f4       	brtc	.+2      	; 0x728 <__addsf3+0x1e>
 726:	e0 95       	com	r30
 728:	e7 fb       	bst	r30, 7
 72a:	24 c1       	rjmp	.+584    	; 0x974 <__fp_inf>

0000072c <__addsf3x>:
 72c:	e9 2f       	mov	r30, r25
 72e:	4a d1       	rcall	.+660    	; 0x9c4 <__fp_split3>
 730:	80 f3       	brcs	.-32     	; 0x712 <__addsf3+0x8>
 732:	ba 17       	cp	r27, r26
 734:	62 07       	cpc	r22, r18
 736:	73 07       	cpc	r23, r19
 738:	84 07       	cpc	r24, r20
 73a:	95 07       	cpc	r25, r21
 73c:	18 f0       	brcs	.+6      	; 0x744 <__addsf3x+0x18>
 73e:	71 f4       	brne	.+28     	; 0x75c <__addsf3x+0x30>
 740:	9e f5       	brtc	.+102    	; 0x7a8 <__addsf3x+0x7c>
 742:	62 c1       	rjmp	.+708    	; 0xa08 <__fp_zero>
 744:	0e f4       	brtc	.+2      	; 0x748 <__addsf3x+0x1c>
 746:	e0 95       	com	r30
 748:	0b 2e       	mov	r0, r27
 74a:	ba 2f       	mov	r27, r26
 74c:	a0 2d       	mov	r26, r0
 74e:	0b 01       	movw	r0, r22
 750:	b9 01       	movw	r22, r18
 752:	90 01       	movw	r18, r0
 754:	0c 01       	movw	r0, r24
 756:	ca 01       	movw	r24, r20
 758:	a0 01       	movw	r20, r0
 75a:	11 24       	eor	r1, r1
 75c:	ff 27       	eor	r31, r31
 75e:	59 1b       	sub	r21, r25
 760:	99 f0       	breq	.+38     	; 0x788 <__addsf3x+0x5c>
 762:	59 3f       	cpi	r21, 0xF9	; 249
 764:	50 f4       	brcc	.+20     	; 0x77a <__addsf3x+0x4e>
 766:	50 3e       	cpi	r21, 0xE0	; 224
 768:	68 f1       	brcs	.+90     	; 0x7c4 <__addsf3x+0x98>
 76a:	1a 16       	cp	r1, r26
 76c:	f0 40       	sbci	r31, 0x00	; 0
 76e:	a2 2f       	mov	r26, r18
 770:	23 2f       	mov	r18, r19
 772:	34 2f       	mov	r19, r20
 774:	44 27       	eor	r20, r20
 776:	58 5f       	subi	r21, 0xF8	; 248
 778:	f3 cf       	rjmp	.-26     	; 0x760 <__addsf3x+0x34>
 77a:	46 95       	lsr	r20
 77c:	37 95       	ror	r19
 77e:	27 95       	ror	r18
 780:	a7 95       	ror	r26
 782:	f0 40       	sbci	r31, 0x00	; 0
 784:	53 95       	inc	r21
 786:	c9 f7       	brne	.-14     	; 0x77a <__addsf3x+0x4e>
 788:	7e f4       	brtc	.+30     	; 0x7a8 <__addsf3x+0x7c>
 78a:	1f 16       	cp	r1, r31
 78c:	ba 0b       	sbc	r27, r26
 78e:	62 0b       	sbc	r22, r18
 790:	73 0b       	sbc	r23, r19
 792:	84 0b       	sbc	r24, r20
 794:	ba f0       	brmi	.+46     	; 0x7c4 <__addsf3x+0x98>
 796:	91 50       	subi	r25, 0x01	; 1
 798:	a1 f0       	breq	.+40     	; 0x7c2 <__addsf3x+0x96>
 79a:	ff 0f       	add	r31, r31
 79c:	bb 1f       	adc	r27, r27
 79e:	66 1f       	adc	r22, r22
 7a0:	77 1f       	adc	r23, r23
 7a2:	88 1f       	adc	r24, r24
 7a4:	c2 f7       	brpl	.-16     	; 0x796 <__addsf3x+0x6a>
 7a6:	0e c0       	rjmp	.+28     	; 0x7c4 <__addsf3x+0x98>
 7a8:	ba 0f       	add	r27, r26
 7aa:	62 1f       	adc	r22, r18
 7ac:	73 1f       	adc	r23, r19
 7ae:	84 1f       	adc	r24, r20
 7b0:	48 f4       	brcc	.+18     	; 0x7c4 <__addsf3x+0x98>
 7b2:	87 95       	ror	r24
 7b4:	77 95       	ror	r23
 7b6:	67 95       	ror	r22
 7b8:	b7 95       	ror	r27
 7ba:	f7 95       	ror	r31
 7bc:	9e 3f       	cpi	r25, 0xFE	; 254
 7be:	08 f0       	brcs	.+2      	; 0x7c2 <__addsf3x+0x96>
 7c0:	b3 cf       	rjmp	.-154    	; 0x728 <__addsf3+0x1e>
 7c2:	93 95       	inc	r25
 7c4:	88 0f       	add	r24, r24
 7c6:	08 f0       	brcs	.+2      	; 0x7ca <__addsf3x+0x9e>
 7c8:	99 27       	eor	r25, r25
 7ca:	ee 0f       	add	r30, r30
 7cc:	97 95       	ror	r25
 7ce:	87 95       	ror	r24
 7d0:	08 95       	ret

000007d2 <__divsf3>:
 7d2:	0c d0       	rcall	.+24     	; 0x7ec <__divsf3x>
 7d4:	e6 c0       	rjmp	.+460    	; 0x9a2 <__fp_round>
 7d6:	de d0       	rcall	.+444    	; 0x994 <__fp_pscB>
 7d8:	40 f0       	brcs	.+16     	; 0x7ea <__divsf3+0x18>
 7da:	d5 d0       	rcall	.+426    	; 0x986 <__fp_pscA>
 7dc:	30 f0       	brcs	.+12     	; 0x7ea <__divsf3+0x18>
 7de:	21 f4       	brne	.+8      	; 0x7e8 <__divsf3+0x16>
 7e0:	5f 3f       	cpi	r21, 0xFF	; 255
 7e2:	19 f0       	breq	.+6      	; 0x7ea <__divsf3+0x18>
 7e4:	c7 c0       	rjmp	.+398    	; 0x974 <__fp_inf>
 7e6:	51 11       	cpse	r21, r1
 7e8:	10 c1       	rjmp	.+544    	; 0xa0a <__fp_szero>
 7ea:	ca c0       	rjmp	.+404    	; 0x980 <__fp_nan>

000007ec <__divsf3x>:
 7ec:	eb d0       	rcall	.+470    	; 0x9c4 <__fp_split3>
 7ee:	98 f3       	brcs	.-26     	; 0x7d6 <__divsf3+0x4>

000007f0 <__divsf3_pse>:
 7f0:	99 23       	and	r25, r25
 7f2:	c9 f3       	breq	.-14     	; 0x7e6 <__divsf3+0x14>
 7f4:	55 23       	and	r21, r21
 7f6:	b1 f3       	breq	.-20     	; 0x7e4 <__divsf3+0x12>
 7f8:	95 1b       	sub	r25, r21
 7fa:	55 0b       	sbc	r21, r21
 7fc:	bb 27       	eor	r27, r27
 7fe:	aa 27       	eor	r26, r26
 800:	62 17       	cp	r22, r18
 802:	73 07       	cpc	r23, r19
 804:	84 07       	cpc	r24, r20
 806:	38 f0       	brcs	.+14     	; 0x816 <__divsf3_pse+0x26>
 808:	9f 5f       	subi	r25, 0xFF	; 255
 80a:	5f 4f       	sbci	r21, 0xFF	; 255
 80c:	22 0f       	add	r18, r18
 80e:	33 1f       	adc	r19, r19
 810:	44 1f       	adc	r20, r20
 812:	aa 1f       	adc	r26, r26
 814:	a9 f3       	breq	.-22     	; 0x800 <__divsf3_pse+0x10>
 816:	33 d0       	rcall	.+102    	; 0x87e <__stack+0x1f>
 818:	0e 2e       	mov	r0, r30
 81a:	3a f0       	brmi	.+14     	; 0x82a <__divsf3_pse+0x3a>
 81c:	e0 e8       	ldi	r30, 0x80	; 128
 81e:	30 d0       	rcall	.+96     	; 0x880 <__stack+0x21>
 820:	91 50       	subi	r25, 0x01	; 1
 822:	50 40       	sbci	r21, 0x00	; 0
 824:	e6 95       	lsr	r30
 826:	00 1c       	adc	r0, r0
 828:	ca f7       	brpl	.-14     	; 0x81c <__divsf3_pse+0x2c>
 82a:	29 d0       	rcall	.+82     	; 0x87e <__stack+0x1f>
 82c:	fe 2f       	mov	r31, r30
 82e:	27 d0       	rcall	.+78     	; 0x87e <__stack+0x1f>
 830:	66 0f       	add	r22, r22
 832:	77 1f       	adc	r23, r23
 834:	88 1f       	adc	r24, r24
 836:	bb 1f       	adc	r27, r27
 838:	26 17       	cp	r18, r22
 83a:	37 07       	cpc	r19, r23
 83c:	48 07       	cpc	r20, r24
 83e:	ab 07       	cpc	r26, r27
 840:	b0 e8       	ldi	r27, 0x80	; 128
 842:	09 f0       	breq	.+2      	; 0x846 <__divsf3_pse+0x56>
 844:	bb 0b       	sbc	r27, r27
 846:	80 2d       	mov	r24, r0
 848:	bf 01       	movw	r22, r30
 84a:	ff 27       	eor	r31, r31
 84c:	93 58       	subi	r25, 0x83	; 131
 84e:	5f 4f       	sbci	r21, 0xFF	; 255
 850:	2a f0       	brmi	.+10     	; 0x85c <__divsf3_pse+0x6c>
 852:	9e 3f       	cpi	r25, 0xFE	; 254
 854:	51 05       	cpc	r21, r1
 856:	68 f0       	brcs	.+26     	; 0x872 <__stack+0x13>
 858:	8d c0       	rjmp	.+282    	; 0x974 <__fp_inf>
 85a:	d7 c0       	rjmp	.+430    	; 0xa0a <__fp_szero>
 85c:	5f 3f       	cpi	r21, 0xFF	; 255
 85e:	ec f3       	brlt	.-6      	; 0x85a <__divsf3_pse+0x6a>
 860:	98 3e       	cpi	r25, 0xE8	; 232
 862:	dc f3       	brlt	.-10     	; 0x85a <__divsf3_pse+0x6a>
 864:	86 95       	lsr	r24
 866:	77 95       	ror	r23
 868:	67 95       	ror	r22
 86a:	b7 95       	ror	r27
 86c:	f7 95       	ror	r31
 86e:	9f 5f       	subi	r25, 0xFF	; 255
 870:	c9 f7       	brne	.-14     	; 0x864 <__stack+0x5>
 872:	88 0f       	add	r24, r24
 874:	91 1d       	adc	r25, r1
 876:	96 95       	lsr	r25
 878:	87 95       	ror	r24
 87a:	97 f9       	bld	r25, 7
 87c:	08 95       	ret
 87e:	e1 e0       	ldi	r30, 0x01	; 1
 880:	66 0f       	add	r22, r22
 882:	77 1f       	adc	r23, r23
 884:	88 1f       	adc	r24, r24
 886:	bb 1f       	adc	r27, r27
 888:	62 17       	cp	r22, r18
 88a:	73 07       	cpc	r23, r19
 88c:	84 07       	cpc	r24, r20
 88e:	ba 07       	cpc	r27, r26
 890:	20 f0       	brcs	.+8      	; 0x89a <__stack+0x3b>
 892:	62 1b       	sub	r22, r18
 894:	73 0b       	sbc	r23, r19
 896:	84 0b       	sbc	r24, r20
 898:	ba 0b       	sbc	r27, r26
 89a:	ee 1f       	adc	r30, r30
 89c:	88 f7       	brcc	.-30     	; 0x880 <__stack+0x21>
 89e:	e0 95       	com	r30
 8a0:	08 95       	ret

000008a2 <__fixunssfsi>:
 8a2:	98 d0       	rcall	.+304    	; 0x9d4 <__fp_splitA>
 8a4:	88 f0       	brcs	.+34     	; 0x8c8 <__fixunssfsi+0x26>
 8a6:	9f 57       	subi	r25, 0x7F	; 127
 8a8:	90 f0       	brcs	.+36     	; 0x8ce <__fixunssfsi+0x2c>
 8aa:	b9 2f       	mov	r27, r25
 8ac:	99 27       	eor	r25, r25
 8ae:	b7 51       	subi	r27, 0x17	; 23
 8b0:	a0 f0       	brcs	.+40     	; 0x8da <__fixunssfsi+0x38>
 8b2:	d1 f0       	breq	.+52     	; 0x8e8 <__fixunssfsi+0x46>
 8b4:	66 0f       	add	r22, r22
 8b6:	77 1f       	adc	r23, r23
 8b8:	88 1f       	adc	r24, r24
 8ba:	99 1f       	adc	r25, r25
 8bc:	1a f0       	brmi	.+6      	; 0x8c4 <__fixunssfsi+0x22>
 8be:	ba 95       	dec	r27
 8c0:	c9 f7       	brne	.-14     	; 0x8b4 <__fixunssfsi+0x12>
 8c2:	12 c0       	rjmp	.+36     	; 0x8e8 <__fixunssfsi+0x46>
 8c4:	b1 30       	cpi	r27, 0x01	; 1
 8c6:	81 f0       	breq	.+32     	; 0x8e8 <__fixunssfsi+0x46>
 8c8:	9f d0       	rcall	.+318    	; 0xa08 <__fp_zero>
 8ca:	b1 e0       	ldi	r27, 0x01	; 1
 8cc:	08 95       	ret
 8ce:	9c c0       	rjmp	.+312    	; 0xa08 <__fp_zero>
 8d0:	67 2f       	mov	r22, r23
 8d2:	78 2f       	mov	r23, r24
 8d4:	88 27       	eor	r24, r24
 8d6:	b8 5f       	subi	r27, 0xF8	; 248
 8d8:	39 f0       	breq	.+14     	; 0x8e8 <__fixunssfsi+0x46>
 8da:	b9 3f       	cpi	r27, 0xF9	; 249
 8dc:	cc f3       	brlt	.-14     	; 0x8d0 <__fixunssfsi+0x2e>
 8de:	86 95       	lsr	r24
 8e0:	77 95       	ror	r23
 8e2:	67 95       	ror	r22
 8e4:	b3 95       	inc	r27
 8e6:	d9 f7       	brne	.-10     	; 0x8de <__fixunssfsi+0x3c>
 8e8:	3e f4       	brtc	.+14     	; 0x8f8 <__fixunssfsi+0x56>
 8ea:	90 95       	com	r25
 8ec:	80 95       	com	r24
 8ee:	70 95       	com	r23
 8f0:	61 95       	neg	r22
 8f2:	7f 4f       	sbci	r23, 0xFF	; 255
 8f4:	8f 4f       	sbci	r24, 0xFF	; 255
 8f6:	9f 4f       	sbci	r25, 0xFF	; 255
 8f8:	08 95       	ret

000008fa <__floatunsisf>:
 8fa:	e8 94       	clt
 8fc:	09 c0       	rjmp	.+18     	; 0x910 <__floatsisf+0x12>

000008fe <__floatsisf>:
 8fe:	97 fb       	bst	r25, 7
 900:	3e f4       	brtc	.+14     	; 0x910 <__floatsisf+0x12>
 902:	90 95       	com	r25
 904:	80 95       	com	r24
 906:	70 95       	com	r23
 908:	61 95       	neg	r22
 90a:	7f 4f       	sbci	r23, 0xFF	; 255
 90c:	8f 4f       	sbci	r24, 0xFF	; 255
 90e:	9f 4f       	sbci	r25, 0xFF	; 255
 910:	99 23       	and	r25, r25
 912:	a9 f0       	breq	.+42     	; 0x93e <__floatsisf+0x40>
 914:	f9 2f       	mov	r31, r25
 916:	96 e9       	ldi	r25, 0x96	; 150
 918:	bb 27       	eor	r27, r27
 91a:	93 95       	inc	r25
 91c:	f6 95       	lsr	r31
 91e:	87 95       	ror	r24
 920:	77 95       	ror	r23
 922:	67 95       	ror	r22
 924:	b7 95       	ror	r27
 926:	f1 11       	cpse	r31, r1
 928:	f8 cf       	rjmp	.-16     	; 0x91a <__floatsisf+0x1c>
 92a:	fa f4       	brpl	.+62     	; 0x96a <__floatsisf+0x6c>
 92c:	bb 0f       	add	r27, r27
 92e:	11 f4       	brne	.+4      	; 0x934 <__floatsisf+0x36>
 930:	60 ff       	sbrs	r22, 0
 932:	1b c0       	rjmp	.+54     	; 0x96a <__floatsisf+0x6c>
 934:	6f 5f       	subi	r22, 0xFF	; 255
 936:	7f 4f       	sbci	r23, 0xFF	; 255
 938:	8f 4f       	sbci	r24, 0xFF	; 255
 93a:	9f 4f       	sbci	r25, 0xFF	; 255
 93c:	16 c0       	rjmp	.+44     	; 0x96a <__floatsisf+0x6c>
 93e:	88 23       	and	r24, r24
 940:	11 f0       	breq	.+4      	; 0x946 <__floatsisf+0x48>
 942:	96 e9       	ldi	r25, 0x96	; 150
 944:	11 c0       	rjmp	.+34     	; 0x968 <__floatsisf+0x6a>
 946:	77 23       	and	r23, r23
 948:	21 f0       	breq	.+8      	; 0x952 <__floatsisf+0x54>
 94a:	9e e8       	ldi	r25, 0x8E	; 142
 94c:	87 2f       	mov	r24, r23
 94e:	76 2f       	mov	r23, r22
 950:	05 c0       	rjmp	.+10     	; 0x95c <__floatsisf+0x5e>
 952:	66 23       	and	r22, r22
 954:	71 f0       	breq	.+28     	; 0x972 <__floatsisf+0x74>
 956:	96 e8       	ldi	r25, 0x86	; 134
 958:	86 2f       	mov	r24, r22
 95a:	70 e0       	ldi	r23, 0x00	; 0
 95c:	60 e0       	ldi	r22, 0x00	; 0
 95e:	2a f0       	brmi	.+10     	; 0x96a <__floatsisf+0x6c>
 960:	9a 95       	dec	r25
 962:	66 0f       	add	r22, r22
 964:	77 1f       	adc	r23, r23
 966:	88 1f       	adc	r24, r24
 968:	da f7       	brpl	.-10     	; 0x960 <__floatsisf+0x62>
 96a:	88 0f       	add	r24, r24
 96c:	96 95       	lsr	r25
 96e:	87 95       	ror	r24
 970:	97 f9       	bld	r25, 7
 972:	08 95       	ret

00000974 <__fp_inf>:
 974:	97 f9       	bld	r25, 7
 976:	9f 67       	ori	r25, 0x7F	; 127
 978:	80 e8       	ldi	r24, 0x80	; 128
 97a:	70 e0       	ldi	r23, 0x00	; 0
 97c:	60 e0       	ldi	r22, 0x00	; 0
 97e:	08 95       	ret

00000980 <__fp_nan>:
 980:	9f ef       	ldi	r25, 0xFF	; 255
 982:	80 ec       	ldi	r24, 0xC0	; 192
 984:	08 95       	ret

00000986 <__fp_pscA>:
 986:	00 24       	eor	r0, r0
 988:	0a 94       	dec	r0
 98a:	16 16       	cp	r1, r22
 98c:	17 06       	cpc	r1, r23
 98e:	18 06       	cpc	r1, r24
 990:	09 06       	cpc	r0, r25
 992:	08 95       	ret

00000994 <__fp_pscB>:
 994:	00 24       	eor	r0, r0
 996:	0a 94       	dec	r0
 998:	12 16       	cp	r1, r18
 99a:	13 06       	cpc	r1, r19
 99c:	14 06       	cpc	r1, r20
 99e:	05 06       	cpc	r0, r21
 9a0:	08 95       	ret

000009a2 <__fp_round>:
 9a2:	09 2e       	mov	r0, r25
 9a4:	03 94       	inc	r0
 9a6:	00 0c       	add	r0, r0
 9a8:	11 f4       	brne	.+4      	; 0x9ae <__fp_round+0xc>
 9aa:	88 23       	and	r24, r24
 9ac:	52 f0       	brmi	.+20     	; 0x9c2 <__fp_round+0x20>
 9ae:	bb 0f       	add	r27, r27
 9b0:	40 f4       	brcc	.+16     	; 0x9c2 <__fp_round+0x20>
 9b2:	bf 2b       	or	r27, r31
 9b4:	11 f4       	brne	.+4      	; 0x9ba <__fp_round+0x18>
 9b6:	60 ff       	sbrs	r22, 0
 9b8:	04 c0       	rjmp	.+8      	; 0x9c2 <__fp_round+0x20>
 9ba:	6f 5f       	subi	r22, 0xFF	; 255
 9bc:	7f 4f       	sbci	r23, 0xFF	; 255
 9be:	8f 4f       	sbci	r24, 0xFF	; 255
 9c0:	9f 4f       	sbci	r25, 0xFF	; 255
 9c2:	08 95       	ret

000009c4 <__fp_split3>:
 9c4:	57 fd       	sbrc	r21, 7
 9c6:	90 58       	subi	r25, 0x80	; 128
 9c8:	44 0f       	add	r20, r20
 9ca:	55 1f       	adc	r21, r21
 9cc:	59 f0       	breq	.+22     	; 0x9e4 <__fp_splitA+0x10>
 9ce:	5f 3f       	cpi	r21, 0xFF	; 255
 9d0:	71 f0       	breq	.+28     	; 0x9ee <__fp_splitA+0x1a>
 9d2:	47 95       	ror	r20

000009d4 <__fp_splitA>:
 9d4:	88 0f       	add	r24, r24
 9d6:	97 fb       	bst	r25, 7
 9d8:	99 1f       	adc	r25, r25
 9da:	61 f0       	breq	.+24     	; 0x9f4 <__fp_splitA+0x20>
 9dc:	9f 3f       	cpi	r25, 0xFF	; 255
 9de:	79 f0       	breq	.+30     	; 0x9fe <__fp_splitA+0x2a>
 9e0:	87 95       	ror	r24
 9e2:	08 95       	ret
 9e4:	12 16       	cp	r1, r18
 9e6:	13 06       	cpc	r1, r19
 9e8:	14 06       	cpc	r1, r20
 9ea:	55 1f       	adc	r21, r21
 9ec:	f2 cf       	rjmp	.-28     	; 0x9d2 <__fp_split3+0xe>
 9ee:	46 95       	lsr	r20
 9f0:	f1 df       	rcall	.-30     	; 0x9d4 <__fp_splitA>
 9f2:	08 c0       	rjmp	.+16     	; 0xa04 <__fp_splitA+0x30>
 9f4:	16 16       	cp	r1, r22
 9f6:	17 06       	cpc	r1, r23
 9f8:	18 06       	cpc	r1, r24
 9fa:	99 1f       	adc	r25, r25
 9fc:	f1 cf       	rjmp	.-30     	; 0x9e0 <__fp_splitA+0xc>
 9fe:	86 95       	lsr	r24
 a00:	71 05       	cpc	r23, r1
 a02:	61 05       	cpc	r22, r1
 a04:	08 94       	sec
 a06:	08 95       	ret

00000a08 <__fp_zero>:
 a08:	e8 94       	clt

00000a0a <__fp_szero>:
 a0a:	bb 27       	eor	r27, r27
 a0c:	66 27       	eor	r22, r22
 a0e:	77 27       	eor	r23, r23
 a10:	cb 01       	movw	r24, r22
 a12:	97 f9       	bld	r25, 7
 a14:	08 95       	ret

00000a16 <__mulsf3>:
 a16:	0b d0       	rcall	.+22     	; 0xa2e <__mulsf3x>
 a18:	c4 cf       	rjmp	.-120    	; 0x9a2 <__fp_round>
 a1a:	b5 df       	rcall	.-150    	; 0x986 <__fp_pscA>
 a1c:	28 f0       	brcs	.+10     	; 0xa28 <__mulsf3+0x12>
 a1e:	ba df       	rcall	.-140    	; 0x994 <__fp_pscB>
 a20:	18 f0       	brcs	.+6      	; 0xa28 <__mulsf3+0x12>
 a22:	95 23       	and	r25, r21
 a24:	09 f0       	breq	.+2      	; 0xa28 <__mulsf3+0x12>
 a26:	a6 cf       	rjmp	.-180    	; 0x974 <__fp_inf>
 a28:	ab cf       	rjmp	.-170    	; 0x980 <__fp_nan>
 a2a:	11 24       	eor	r1, r1
 a2c:	ee cf       	rjmp	.-36     	; 0xa0a <__fp_szero>

00000a2e <__mulsf3x>:
 a2e:	ca df       	rcall	.-108    	; 0x9c4 <__fp_split3>
 a30:	a0 f3       	brcs	.-24     	; 0xa1a <__mulsf3+0x4>

00000a32 <__mulsf3_pse>:
 a32:	95 9f       	mul	r25, r21
 a34:	d1 f3       	breq	.-12     	; 0xa2a <__mulsf3+0x14>
 a36:	95 0f       	add	r25, r21
 a38:	50 e0       	ldi	r21, 0x00	; 0
 a3a:	55 1f       	adc	r21, r21
 a3c:	62 9f       	mul	r22, r18
 a3e:	f0 01       	movw	r30, r0
 a40:	72 9f       	mul	r23, r18
 a42:	bb 27       	eor	r27, r27
 a44:	f0 0d       	add	r31, r0
 a46:	b1 1d       	adc	r27, r1
 a48:	63 9f       	mul	r22, r19
 a4a:	aa 27       	eor	r26, r26
 a4c:	f0 0d       	add	r31, r0
 a4e:	b1 1d       	adc	r27, r1
 a50:	aa 1f       	adc	r26, r26
 a52:	64 9f       	mul	r22, r20
 a54:	66 27       	eor	r22, r22
 a56:	b0 0d       	add	r27, r0
 a58:	a1 1d       	adc	r26, r1
 a5a:	66 1f       	adc	r22, r22
 a5c:	82 9f       	mul	r24, r18
 a5e:	22 27       	eor	r18, r18
 a60:	b0 0d       	add	r27, r0
 a62:	a1 1d       	adc	r26, r1
 a64:	62 1f       	adc	r22, r18
 a66:	73 9f       	mul	r23, r19
 a68:	b0 0d       	add	r27, r0
 a6a:	a1 1d       	adc	r26, r1
 a6c:	62 1f       	adc	r22, r18
 a6e:	83 9f       	mul	r24, r19
 a70:	a0 0d       	add	r26, r0
 a72:	61 1d       	adc	r22, r1
 a74:	22 1f       	adc	r18, r18
 a76:	74 9f       	mul	r23, r20
 a78:	33 27       	eor	r19, r19
 a7a:	a0 0d       	add	r26, r0
 a7c:	61 1d       	adc	r22, r1
 a7e:	23 1f       	adc	r18, r19
 a80:	84 9f       	mul	r24, r20
 a82:	60 0d       	add	r22, r0
 a84:	21 1d       	adc	r18, r1
 a86:	82 2f       	mov	r24, r18
 a88:	76 2f       	mov	r23, r22
 a8a:	6a 2f       	mov	r22, r26
 a8c:	11 24       	eor	r1, r1
 a8e:	9f 57       	subi	r25, 0x7F	; 127
 a90:	50 40       	sbci	r21, 0x00	; 0
 a92:	8a f0       	brmi	.+34     	; 0xab6 <__mulsf3_pse+0x84>
 a94:	e1 f0       	breq	.+56     	; 0xace <__mulsf3_pse+0x9c>
 a96:	88 23       	and	r24, r24
 a98:	4a f0       	brmi	.+18     	; 0xaac <__mulsf3_pse+0x7a>
 a9a:	ee 0f       	add	r30, r30
 a9c:	ff 1f       	adc	r31, r31
 a9e:	bb 1f       	adc	r27, r27
 aa0:	66 1f       	adc	r22, r22
 aa2:	77 1f       	adc	r23, r23
 aa4:	88 1f       	adc	r24, r24
 aa6:	91 50       	subi	r25, 0x01	; 1
 aa8:	50 40       	sbci	r21, 0x00	; 0
 aaa:	a9 f7       	brne	.-22     	; 0xa96 <__mulsf3_pse+0x64>
 aac:	9e 3f       	cpi	r25, 0xFE	; 254
 aae:	51 05       	cpc	r21, r1
 ab0:	70 f0       	brcs	.+28     	; 0xace <__mulsf3_pse+0x9c>
 ab2:	60 cf       	rjmp	.-320    	; 0x974 <__fp_inf>
 ab4:	aa cf       	rjmp	.-172    	; 0xa0a <__fp_szero>
 ab6:	5f 3f       	cpi	r21, 0xFF	; 255
 ab8:	ec f3       	brlt	.-6      	; 0xab4 <__mulsf3_pse+0x82>
 aba:	98 3e       	cpi	r25, 0xE8	; 232
 abc:	dc f3       	brlt	.-10     	; 0xab4 <__mulsf3_pse+0x82>
 abe:	86 95       	lsr	r24
 ac0:	77 95       	ror	r23
 ac2:	67 95       	ror	r22
 ac4:	b7 95       	ror	r27
 ac6:	f7 95       	ror	r31
 ac8:	e7 95       	ror	r30
 aca:	9f 5f       	subi	r25, 0xFF	; 255
 acc:	c1 f7       	brne	.-16     	; 0xabe <__mulsf3_pse+0x8c>
 ace:	fe 2b       	or	r31, r30
 ad0:	88 0f       	add	r24, r24
 ad2:	91 1d       	adc	r25, r1
 ad4:	96 95       	lsr	r25
 ad6:	87 95       	ror	r24
 ad8:	97 f9       	bld	r25, 7
 ada:	08 95       	ret

00000adc <_exit>:
 adc:	f8 94       	cli

00000ade <__stop_program>:
 ade:	ff cf       	rjmp	.-2      	; 0xade <__stop_program>
